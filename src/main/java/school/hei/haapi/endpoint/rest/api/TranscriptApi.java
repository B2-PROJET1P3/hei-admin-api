/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiClient;
import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.client.ApiResponse;
import school.hei.haapi.endpoint.rest.client.Pair;

import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.Claim;
import school.hei.haapi.endpoint.rest.model.CrupdateTranscript;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;
import school.hei.haapi.endpoint.rest.model.Transcript;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T14:12:24.825495400+03:00[Europe/Moscow]")
public class TranscriptApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TranscriptApi() {
    this(new ApiClient());
  }

  public TranscriptApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Update transcripts if id are provided, create them otherwise
   * 
   * @param studentId  (required)
   * @param crupdateTranscript Transcripts to update (required)
   * @return List&lt;Transcript&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Transcript> crupdateStudentTranscripts(String studentId, List<CrupdateTranscript> crupdateTranscript) throws ApiException {
    ApiResponse<List<Transcript>> localVarResponse = crupdateStudentTranscriptsWithHttpInfo(studentId, crupdateTranscript);
    return localVarResponse.getData();
  }

  /**
   * Update transcripts if id are provided, create them otherwise
   * 
   * @param studentId  (required)
   * @param crupdateTranscript Transcripts to update (required)
   * @return ApiResponse&lt;List&lt;Transcript&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Transcript>> crupdateStudentTranscriptsWithHttpInfo(String studentId, List<CrupdateTranscript> crupdateTranscript) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = crupdateStudentTranscriptsRequestBuilder(studentId, crupdateTranscript);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("crupdateStudentTranscripts", localVarResponse);
      }
      return new ApiResponse<List<Transcript>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Transcript>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder crupdateStudentTranscriptsRequestBuilder(String studentId, List<CrupdateTranscript> crupdateTranscript) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling crupdateStudentTranscripts");
    }
    // verify the required parameter 'crupdateTranscript' is set
    if (crupdateTranscript == null) {
      throw new ApiException(400, "Missing the required parameter 'crupdateTranscript' when calling crupdateStudentTranscripts");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(crupdateTranscript);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a claim of transcript version.
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param claimId  (required)
   * @return Claim
   * @throws ApiException if fails to make API call
   */
  public Claim getStudentClaimOfTranscriptVersion(String studentId, String transcriptId, String versionId, String claimId) throws ApiException {
    ApiResponse<Claim> localVarResponse = getStudentClaimOfTranscriptVersionWithHttpInfo(studentId, transcriptId, versionId, claimId);
    return localVarResponse.getData();
  }

  /**
   * Get a claim of transcript version.
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param claimId  (required)
   * @return ApiResponse&lt;Claim&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Claim> getStudentClaimOfTranscriptVersionWithHttpInfo(String studentId, String transcriptId, String versionId, String claimId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentClaimOfTranscriptVersionRequestBuilder(studentId, transcriptId, versionId, claimId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentClaimOfTranscriptVersion", localVarResponse);
      }
      return new ApiResponse<Claim>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Claim>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentClaimOfTranscriptVersionRequestBuilder(String studentId, String transcriptId, String versionId, String claimId) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentClaimOfTranscriptVersion");
    }
    // verify the required parameter 'transcriptId' is set
    if (transcriptId == null) {
      throw new ApiException(400, "Missing the required parameter 'transcriptId' when calling getStudentClaimOfTranscriptVersion");
    }
    // verify the required parameter 'versionId' is set
    if (versionId == null) {
      throw new ApiException(400, "Missing the required parameter 'versionId' when calling getStudentClaimOfTranscriptVersion");
    }
    // verify the required parameter 'claimId' is set
    if (claimId == null) {
      throw new ApiException(400, "Missing the required parameter 'claimId' when calling getStudentClaimOfTranscriptVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts/{transcript_id}/versions/{version_id}/claims/{claim_id}"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{transcript_id}", ApiClient.urlEncode(transcriptId.toString()))
        .replace("{version_id}", ApiClient.urlEncode(versionId.toString()))
        .replace("{claim_id}", ApiClient.urlEncode(claimId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all claims for a specific version of a student transcript.
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return List&lt;Claim&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Claim> getStudentClaims(String studentId, String transcriptId, String versionId, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Claim>> localVarResponse = getStudentClaimsWithHttpInfo(studentId, transcriptId, versionId, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get all claims for a specific version of a student transcript.
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;List&lt;Claim&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Claim>> getStudentClaimsWithHttpInfo(String studentId, String transcriptId, String versionId, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentClaimsRequestBuilder(studentId, transcriptId, versionId, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentClaims", localVarResponse);
      }
      return new ApiResponse<List<Claim>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Claim>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentClaimsRequestBuilder(String studentId, String transcriptId, String versionId, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentClaims");
    }
    // verify the required parameter 'transcriptId' is set
    if (transcriptId == null) {
      throw new ApiException(400, "Missing the required parameter 'transcriptId' when calling getStudentClaims");
    }
    // verify the required parameter 'versionId' is set
    if (versionId == null) {
      throw new ApiException(400, "Missing the required parameter 'versionId' when calling getStudentClaims");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts/{transcript_id}/versions/{version_id}/claims"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{transcript_id}", ApiClient.urlEncode(transcriptId.toString()))
        .replace("{version_id}", ApiClient.urlEncode(versionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a student transcript by identifier
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @return Transcript
   * @throws ApiException if fails to make API call
   */
  public Transcript getStudentTranscriptById(String studentId, String transcriptId) throws ApiException {
    ApiResponse<Transcript> localVarResponse = getStudentTranscriptByIdWithHttpInfo(studentId, transcriptId);
    return localVarResponse.getData();
  }

  /**
   * Get a student transcript by identifier
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @return ApiResponse&lt;Transcript&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Transcript> getStudentTranscriptByIdWithHttpInfo(String studentId, String transcriptId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentTranscriptByIdRequestBuilder(studentId, transcriptId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentTranscriptById", localVarResponse);
      }
      return new ApiResponse<Transcript>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Transcript>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentTranscriptByIdRequestBuilder(String studentId, String transcriptId) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentTranscriptById");
    }
    // verify the required parameter 'transcriptId' is set
    if (transcriptId == null) {
      throw new ApiException(400, "Missing the required parameter 'transcriptId' when calling getStudentTranscriptById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts/{transcript_id}"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{transcript_id}", ApiClient.urlEncode(transcriptId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all transcript of a student
   * 
   * @param studentId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return List&lt;Transcript&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Transcript> getStudentTranscripts(String studentId, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<List<Transcript>> localVarResponse = getStudentTranscriptsWithHttpInfo(studentId, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Get all transcript of a student
   * 
   * @param studentId  (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;List&lt;Transcript&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Transcript>> getStudentTranscriptsWithHttpInfo(String studentId, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudentTranscriptsRequestBuilder(studentId, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getStudentTranscripts", localVarResponse);
      }
      return new ApiResponse<List<Transcript>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Transcript>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudentTranscriptsRequestBuilder(String studentId, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling getStudentTranscripts");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * create or modify claim of Transcript Version
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param claimId  (required)
   * @param claim  (required)
   * @return Claim
   * @throws ApiException if fails to make API call
   */
  public Claim putStudentClaimsOfTranscriptVersion(String studentId, String transcriptId, String versionId, String claimId, Claim claim) throws ApiException {
    ApiResponse<Claim> localVarResponse = putStudentClaimsOfTranscriptVersionWithHttpInfo(studentId, transcriptId, versionId, claimId, claim);
    return localVarResponse.getData();
  }

  /**
   * create or modify claim of Transcript Version
   * 
   * @param studentId  (required)
   * @param transcriptId  (required)
   * @param versionId  (required)
   * @param claimId  (required)
   * @param claim  (required)
   * @return ApiResponse&lt;Claim&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Claim> putStudentClaimsOfTranscriptVersionWithHttpInfo(String studentId, String transcriptId, String versionId, String claimId, Claim claim) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putStudentClaimsOfTranscriptVersionRequestBuilder(studentId, transcriptId, versionId, claimId, claim);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("putStudentClaimsOfTranscriptVersion", localVarResponse);
      }
      return new ApiResponse<Claim>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Claim>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putStudentClaimsOfTranscriptVersionRequestBuilder(String studentId, String transcriptId, String versionId, String claimId, Claim claim) throws ApiException {
    // verify the required parameter 'studentId' is set
    if (studentId == null) {
      throw new ApiException(400, "Missing the required parameter 'studentId' when calling putStudentClaimsOfTranscriptVersion");
    }
    // verify the required parameter 'transcriptId' is set
    if (transcriptId == null) {
      throw new ApiException(400, "Missing the required parameter 'transcriptId' when calling putStudentClaimsOfTranscriptVersion");
    }
    // verify the required parameter 'versionId' is set
    if (versionId == null) {
      throw new ApiException(400, "Missing the required parameter 'versionId' when calling putStudentClaimsOfTranscriptVersion");
    }
    // verify the required parameter 'claimId' is set
    if (claimId == null) {
      throw new ApiException(400, "Missing the required parameter 'claimId' when calling putStudentClaimsOfTranscriptVersion");
    }
    // verify the required parameter 'claim' is set
    if (claim == null) {
      throw new ApiException(400, "Missing the required parameter 'claim' when calling putStudentClaimsOfTranscriptVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/students/{student_id}/transcripts/{transcript_id}/versions/{version_id}/claims/{claim_id}"
        .replace("{student_id}", ApiClient.urlEncode(studentId.toString()))
        .replace("{transcript_id}", ApiClient.urlEncode(transcriptId.toString()))
        .replace("{version_id}", ApiClient.urlEncode(versionId.toString()))
        .replace("{claim_id}", ApiClient.urlEncode(claimId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(claim);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
